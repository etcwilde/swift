#!/usr/bin/env python3

from database import Database

import argparse
import pathlib
import sys


SCHEMA_VERSION=0.0


def init_db(db, clear):
    with db.transaction() as t:
        if clear:
            for table in ["platform", "toolchain", "sdk", "files", "build_info",
                          "size", "toolchain_files", "sdk_files"]:
                t.single_query(f"DROP TABLE IF EXISTS {table};")
    with open('schema.sql', 'r') as sqlfile:
        db.executescript(sqlfile.read())

    with db.transaction() as t:
        t.create_table("metadata", ["schema_version TEXT"], clear)
        t.single_query("INSERT INTO metadata (schema_version) VALUES (?);",
                       (str(SCHEMA_VERSION), ))


def update_db_main(args):
    with Database(args.database) as db:
        if args.init:
            init_db(db, args.clear)



def main():
    parser = argparse.ArgumentParser(description="Collect toolchain size information")
    commands = parser.add_subparsers()

    # update
    update = commands.add_parser('update')
    update.add_argument('path', type=pathlib.Path, help="path to the root of the toolchain")
    update.add_argument('--init', action='store_true', help="initialize database")
    update.add_argument('--clear', action='store_true', help="erase data and reinitialize database")
    update.add_argument('--database', type=pathlib.Path, default="/tmp/toolchain-size.db")
    update.add_argument('--build', type=str, required=True, help="build identifier")
    update.add_argument('--build-metadata', type=bytes, help="blob of data associated with the build")
    update.set_defaults(func=update_db_main)
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
